#!/usr/bin/env python3
import argparse
from lxml import etree
import os
from pathlib import Path
import subprocess
import sys


def main(argv):
    parser = argparse.ArgumentParser(
        description='Search for reported Lint issues.')
    parser.add_argument(
        '-o',
        '--open',
        action='store_true',
        help='Open lint reports in $BROWSER (or xdg-open if unset).')
    parser.add_argument('ids',
                        metavar='IssueId',
                        nargs='*',
                        help='Issue ID(s) to search for.')
    args = parser.parse_args(argv[1:])
    issue_ids = set(args.ids)
    results = []
    for dirpath, dirnames, filenames in os.walk('.'):
        if 'build' in dirnames:
            dirnames.remove('build')
            xml_path = (Path(dirpath) / 'build' / 'reports' /
                        'lint-results-debug.xml')
            result = False
            if xml_path.exists():
                try:
                    result = process(xml_path, issue_ids)
                except etree.XMLSyntaxError as e:
                    print(f'{xml_path}: {e}\n', file=sys.stderr)
            if result:
                results.append(xml_path.with_suffix('.html'))
        dirnames[:] = sorted(dirname for dirname in dirnames
                             if not dirname.startswith('.'))
    if results and args.open:
        subprocess.run(
            ' '.join([os.environ.get('BROWSER', 'xdg-open')] +
                     [result.resolve().as_uri() for result in results]),
            shell=True)


def process(xmlpath, issue_ids=None):
    with open(xmlpath) as xmlfile:
        root = etree.parse(xmlfile)
    issues = root.xpath('//issue')
    if issue_ids:
        issues = [issue for issue in issues if issue.attrib['id'] in issue_ids]
    else:
        issues = [
            issue for issue in issues if issue.attrib['severity'] == 'Error'
        ]
    if not issues:
        return False
    print(xmlpath.resolve().as_uri(), file=sys.stderr)
    for issue in issues:
        [location] = (child for child in issue if child.tag == 'location')
        try:
            print(':'.join([
                str(Path(location.attrib['file']).relative_to(Path.cwd())),
                location.attrib['line'],
            ] + ([] if issue_ids else [issue.attrib['id']]) +
                           [issue.attrib['errorLine1'].strip()]))
        except KeyError as e:
            print('{0} error'.format(issue.attrib['id']), file=sys.stderr)
    print(file=sys.stderr)
    return True


if __name__ == '__main__':
    main(sys.argv)
