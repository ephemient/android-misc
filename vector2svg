#!/usr/bin/env python3
import argparse
from base64 import b64encode
from contextlib import ExitStack
import html
from lxml import etree
import os
from pathlib import Path
import re
import shlex
import sys

ANDROID_NS = 'http://schemas.android.com/apk/res/android'
AAPT_NS = 'http://schemas.android.com/aapt'
SVG_NS = 'http://www.w3.org/2000/svg'
XLINK_NS = 'http://www.w3.org/1999/xlink'
UNIT_RE = re.compile(r'di?p|sp')


class Resolver:
    cache = {
        'black': ('#000000', None),
        'darkgray': ('#444444', None),
        'gray': ('#888888', None),
        'lightgray': ('#CCCCCC', None),
        'white': ('#FFFFFF', None),
        'red': ('#FF0000', None),
        'green': ('#00FF00', None),
        'blue': ('#0000FF', None),
        'yellow': ('#FFFF00', None),
        'cyan': ('#00FFFF', None),
        'magenta': ('#FF00FF', None),
        'aqua': ('#00FFFF', None),
        'fuchsia': ('#FF00FF', None),
        'darkgrey': ('#444444', None),
        'grey': ('#888888', None),
        'lightgrey': ('#CCCCCC', None),
        'lime': ('#00FF00', None),
        'maroon': ('#800000', None),
        'navy': ('#000080', None),
        'olive': ('#808000', None),
        'purple': ('#800080', None),
        'silver': ('#C0C0C0', None),
        'teal': ('#008080', None),
    }

    def __init__(self, defs, path):
        self.clips = 0
        self.gradients = 0
        self.defs = defs
        self.path = path

    def color(self, value):
        if value in Resolver.cache:
            return Resolver.cache[value]
        elif value.startswith('#'):
            alpha = None
            color = value[1:]
            if len(color) > 6:
                alpha = str(int(color[:-6], base=16) / 255.)
                color = color[-6:]
            return f'#{color}', alpha
        elif value.startswith('@color/'):
            name = value[value.index('/') + 1:]
            for filepath in find_resources(('values'), self.path):
                if filepath.suffix != '.xml':
                    continue
                with open(filepath) as file:
                    root = etree.parse(file).getroot()
                if root.tag != 'resources':
                    continue
                for item in root:
                    if (item.tag == 'color' and 'name' in item.attrib
                            and item.get('name').strip() == name):
                        result = self.color(item.text.strip())
                        Resolver.cache[value] = result
                        return result
            for filepath in find_resources(('color'), self.path):
                if filepath.name != f'{name}.xml':
                    continue
                with open(filepath) as file:
                    root = etree.parse(file).getroot()
                if root.tag != 'selector':
                    continue
                values = {}
                for item in root:
                    if item.tag != 'item' or f'{{{ANDROID_NS}}}color' not in item.attrib:
                        continue
                    values[frozenset(
                        (k, v) for k, v in item.attrib.items()
                        if k.startswith(f'{{{ANDROID_NS}}}state_')
                    )] = item.get(f'{{{ANDROID_NS}}}color').strip()
                if values:
                    result = self.color(values[min(values, key=len)])
                    Resolver.cache[value] = result
                    return result
        elif value.startswith('?attr/'):
            name = value[value.index('/') + 1:]
            variants = {}
            for filepath in find_resources(('values'), self.path):
                if filepath.suffix != '.xml':
                    continue
                with open(filepath) as file:
                    root = etree.parse(file).getroot()
                if root.tag != 'resources':
                    continue
                for item in root:
                    if item.tag == 'style' and 'name' in item.attrib:
                        theme = item.get('name').strip()
                        for subitem in item:
                            if (subitem.tag == 'item'
                                    and 'name' in subitem.attrib
                                    and subitem.get('name').strip() == name):
                                variants[theme] = subitem.text.strip()
            if variants:
                result = self.color(variants[max(variants, key=len)])
                Resolver.cache[value] = result
                return result
        raise Exception(f'Could not interpret {value} as a color.')

    def next_clip_id(self):
        self.clips += 1
        return f'Clip{self.clips}'

    def next_gradient_id(self):
        self.gradients += 1
        return f'Gradient{self.gradients}'

    def gradient(self, element):
        gradient_type = element.get(f'{{{ANDROID_NS}}}type', 'linear').strip()
        if gradient_type not in ('linear', 'radial'):
            raise Exception(f'Unsupported gradient type {gradient_type}',
                            file=sys.stderr)
        dest = etree.SubElement(self.defs, f'{gradient_type}Gradient')
        dest.set('id', self.next_gradient_id())
        if f'{{{ANDROID_NS}}}centerX' in element:
            dest.set('cx', element.get(f'{{{ANDROID_NS}}}centerX'))
        if f'{{{ANDROID_NS}}}centerY' in element:
            dest.set('cy', element.get(f'{{{ANDROID_NS}}}centerY'))
        if f'{{{ANDROID_NS}}}gradientRadius' in element:
            dest.set('r', element.get(f'{{{ANDROID_NS}}}gradientRadius'))
        if f'{{{ANDROID_NS}}}startX' in element:
            dest.set('x1', element.get(f'{{{ANDROID_NS}}}startX'))
        if f'{{{ANDROID_NS}}}startY' in element:
            dest.set('y1', element.get(f'{{{ANDROID_NS}}}startY'))
        if f'{{{ANDROID_NS}}}endX' in element:
            dest.set('x2', element.get(f'{{{ANDROID_NS}}}endX'))
        if f'{{{ANDROID_NS}}}endY' in element:
            dest.set('y2', element.get(f'{{{ANDROID_NS}}}endY'))
        if f'{{{ANDROID_NS}}}startColor' in element:
            color, alpha = self.color(
                element.get(f'{{{ANDROID_NS}}}startColor').strip())
            target = etree.SubElement(dest, 'stop')
            target.set('offset', '0%')
            target.set('stop-color', color)
            if alpha is not None:
                target.set('stop-alpha', alpha)
        if f'{{{ANDROID_NS}}}stopColor' in element:
            color, alpha = self.color(
                element.get(f'{{{ANDROID_NS}}}stopColor').strip())
            target = etree.SubElement(dest, 'stop')
            target.set('offset', '100%')
            target.set('stop-color', color)
            if alpha is not None:
                target.set('stop-alpha', alpha)
        if (f'{{{ANDROID_NS}}}tileMode' in element.attrib
                or f'{{{ANDROID_NS}}}centerColor' in element.attrib):
            print(f'warning: unsupported gradient attributes in {input}',
                  file=sys.stderr)
        for child in element:
            if child.tag != 'item':
                continue
            target = etree.SubElement(dest, 'stop')
            target.set(
                'offset',
                str(float(child.get(f'{{{ANDROID_NS}}}offset')) * 100) + '%')
            color, alpha = self.color(
                child.get(f'{{{ANDROID_NS}}}color').strip())
            target.set('stop-color', color)
            if alpha is not None:
                target.set('stop-opacity', alpha)
        return f'url(#{dest.get("id")})'


def convert_clip_path(input, source, dest, resolver):
    target = etree.SubElement(dest, 'clipPath')
    target.set('id', resolver.next_clip_id())
    if f'{{{ANDROID_NS}}}name' in source.attrib:
        target.set('name', source.get(f'{{{ANDROID_NS}}}name'))
    etree.SubElement(target,
                     'path').set('d', source.get(f'{{{ANDROID_NS}}}pathData'))
    dest.set('clip-path', f'url(#{target.get("id")})')


def convert_group(input, source, dest, resolver):
    target = etree.SubElement(dest, 'g')
    if f'{{{ANDROID_NS}}}name' in source.attrib:
        target.set('name', source.get(f'{{{ANDROID_NS}}}name'))
    rotation = source.get(f'{{{ANDROID_NS}}}rotation', '').strip()
    pivotX = source.get(f'{{{ANDROID_NS}}}pivotX', '').strip()
    pivotY = source.get(f'{{{ANDROID_NS}}}pivotY', '').strip()
    scaleX = source.get(f'{{{ANDROID_NS}}}scaleX', '').strip()
    scaleY = source.get(f'{{{ANDROID_NS}}}scaleY', '').strip()
    translateX = source.get(f'{{{ANDROID_NS}}}translateX', '').strip()
    translateY = source.get(f'{{{ANDROID_NS}}}translateY', '').strip()
    if any((rotation, pivotX, pivotY, scaleX, scaleY, translateX, translateY)):
        target.set(
            'transform', f'translate({translateX or 0} {translateY or 0}) '
            f'scale({scaleX or 1} {scaleY or 1}) '
            f'rotate({rotation or 0} {pivotX or 0} {pivotY or 0})')
    for child in source:
        CONVERTERS[child.tag](input, child, target, resolver)


def convert_path(input, source, dest, resolver):
    target = etree.SubElement(dest, 'path')
    if f'{{{ANDROID_NS}}}name' in source.attrib:
        target.set('name', source.get(f'{{{ANDROID_NS}}}name'))
    target.set('d', source.get(f'{{{ANDROID_NS}}}pathData'))
    alpha = None
    if f'{{{ANDROID_NS}}}fillColor' in source.attrib:
        color, alpha = resolver.color(
            source.get(f'{{{ANDROID_NS}}}fillColor').strip())
        target.set('fill', color)
    alpha = source.get(f'{{{ANDROID_NS}}}fillAlpha', alpha)
    if alpha is not None:
        target.set('fill-opacity', alpha)
    alpha = None
    if f'{{{ANDROID_NS}}}strokeColor' in source.attrib:
        color, alpha = resolver.color(
            source.get(f'{{{ANDROID_NS}}}strokeColor').strip())
        target.set('stroke', color)
    alpha = source.get(f'{{{ANDROID_NS}}}strokeAlpha', alpha)
    if alpha is not None:
        target.set('stroke-opacity', alpha)
    if f'{{{ANDROID_NS}}}strokeWidth' in source.attrib:
        target.set('stroke-width', source.get(f'{{{ANDROID_NS}}}strokeWidth'))
    if f'{{{ANDROID_NS}}}strokeLineCap' in source.attrib:
        target.set('stroke-linecap',
                   source.get(f'{{{ANDROID_NS}}}strokeLineCap'))
    if f'{{{ANDROID_NS}}}strokeLineJoin' in source.attrib:
        target.set('stroke-linejoin',
                   source.get(f'{{{ANDROID_NS}}}strokeLineJoin'))
    if f'{{{ANDROID_NS}}}strokeMiterLimit' in source.attrib:
        target.set('stroke-miterlimit',
                   source.get(f'{{{ANDROID_NS}}}strokeMiterLimit'))
    if f'{{{ANDROID_NS}}}fillType' in source.attrib:
        target.set('fill-rule', source.get(f'{{{ANDROID_NS}}}fillType'))
    if (f'{{{ANDROID_NS}}}trimPathStart' in source.attrib
            or f'{{{ANDROID_NS}}}trimPathEnd' in source.attrib
            or f'{{{ANDROID_NS}}}trimPathOffset' in source.attrib):
        print(f'warning: unsupported trim attributes in {input}',
              file=sys.stderr)
    for child in source:
        if child.tag != f'{{{AAPT_NS}}}attr' or 'name' not in child.attrib:
            continue
        if child.get('name') != 'android:fillColor':
            print(f'warning: unsupported {child.get("name")} in {input}',
                  file=sys.stderr)
            continue
        if len(child) != 1 or child[0].tag != 'gradient':
            print(f'warning: unsupported android:fillColor <' +
                  ' '.join(inner.tag for inner in child) + f'> in {input}',
                  file=sys.stderr)
            continue
        target.set('fill', resolver.gradient(child[0]))


CONVERTERS = {
    'clip-path': convert_clip_path,
    'group': convert_group,
    'path': convert_path
}


def convert(input, path=()):
    if str(input) == '-':
        root = etree.parse(sys.stdin).getroot()
    else:
        with open(input) as file:
            root = etree.parse(file).getroot()
    if root.tag == 'adaptive-icon':
        return convert_adaptive_icon(input, root, path=path)
    svg = etree.Element('svg', nsmap={None: SVG_NS})

    if f'{{{ANDROID_NS}}}name' in root.attrib:
        svg.set('name', root.get(f'{{{ANDROID_NS}}}name'))
    svg.set('width', re.sub(UNIT_RE, 'px', root.get(f'{{{ANDROID_NS}}}width')))
    svg.set('height', re.sub(UNIT_RE, 'px',
                             root.get(f'{{{ANDROID_NS}}}height')))
    viewportWidth = root.get(f'{{{ANDROID_NS}}}viewportWidth')
    viewportHeight = root.get(f'{{{ANDROID_NS}}}viewportHeight')
    svg.set('viewBox', f'0 0 {viewportWidth} {viewportHeight}')
    if f'{{{ANDROID_NS}}}alpha' in root.attrib:
        svg.set('opacity', root.get(f'{{{ANDROID_NS}}}alpha'))
    defs = etree.SubElement(svg, 'defs')
    resolver = Resolver(defs, path)
    if f'{{{ANDROID_NS}}}tint' in root.attrib:
        tint_color, tint_alpha = resolver.color(
            root.get(f'{{{ANDROID_NS}}}tint'))
        tint_mode = root.get(f'{{{ANDROID_NS}}}tintMode', 'src_in').strip()
        tint = etree.SubElement(defs, 'filter')
        tint.set('id', 'Tint')
        flood = etree.SubElement(tint, 'feFlood')
        flood.set('flood-color', tint_color)
        if tint_alpha is not None:
            flood.set('flood-opacity', tint_alpha)
        flood.set('result', 'flood')
        if (tint_mode.startswith('src_') or tint_mode.startswith('dst_')
                or tint_mode in ('add', 'clear', 'src', 'dst', 'xor')):
            composite = etree.SubElement(tint, 'feComposite')
            composite.set(
                'in', 'SourceGraphic'
                if tint_mode.startswith('dst_') else 'BackgroundImage')
            composite.set(
                'in2', 'BackgroundImage'
                if tint_mode.startswith('dst_') else 'SourceGraphic')
            if tint_mode in ('add', 'clear', 'src', 'dst'):
                composite.set('operator', 'arithmetic')
                composite.set('k1', '0')
                composite.set('k2', str(int(tint_mode in ('add', 'src'))))
                composite.set('k3', str(int(tint_mode in ('add', 'dst'))))
                composite.set('k4', '0')
            else:
                composite.set('operator', tint_mode[tint_mode.find('_') + 1:])
        else:
            blend = etree.SubElement(tint, 'feBlend')
            blend.set('in', 'BackgroundImage')
            blend.set('in2', 'SourceGraphic')
            blend.set('mode', tint_mode)
        svg.set('filter', f'url(#Tint)')
    for child in root:
        converter = CONVERTERS[child.tag](input, child, svg, resolver=resolver)

    return svg


def convert_adaptive_icon(input, root, path=()):
    svg = etree.Element('svg', nsmap={None: SVG_NS, 'xlink': XLINK_NS})
    svg.set('width', '108px')
    svg.set('height', '108px')
    svg.set('viewBox', '0 0 108 108')
    resolver = Resolver(etree.SubElement(svg, 'defs'), path)
    clip = etree.SubElement(svg, 'clipPath')
    clip.set('id', 'Clip')
    clip_rect = etree.SubElement(clip, 'rect')
    clip_rect.set('x', '18')
    clip_rect.set('y', '18')
    clip_rect.set('width', '72')
    clip_rect.set('height', '72')
    clip_animate = etree.SubElement(clip_rect, 'animate')
    clip_animate.set('attributeName', 'rx')
    clip_animate.set('values', '36;36;12;12;36')
    clip_animate.set('dur', '6s')
    clip_animate.set('repeatCount', 'indefinite')
    svg.set('clip-path', 'url(#Clip)')
    foreground, background = None, None
    for child in root:
        if (child.tag == 'foreground' and foreground is None
                and f'{{{ANDROID_NS}}}drawable' in child.attrib):
            foreground = child.get(f'{{{ANDROID_NS}}}drawable')
        if (child.tag == 'background' and background is None
                and f'{{{ANDROID_NS}}}drawable' in child.attrib):
            background = child.get(f'{{{ANDROID_NS}}}drawable')
    foreground = convert_drawable(input, foreground, resolver, path)
    animate = etree.SubElement(foreground, 'animateMotion')
    animate.set('dur', '2s')
    animate.set('repeatCount', 'indefinite')
    animate.set('path', 'M0,0H8H-8ZV8V-8Z')
    background = convert_drawable(input, background, resolver, path)
    animate = etree.SubElement(background, 'animateMotion')
    animate.set('dur', '2s')
    animate.set('repeatCount', 'indefinite')
    animate.set('path', 'M0,0H4H-4ZV4V-4Z')
    svg.append(background)
    svg.append(foreground)
    return svg


def convert_drawable(input, name, resolver, path=()):
    if name.startswith('@drawable/'):
        name = name[name.index('/') + 1:]
        element = etree.Element('image')
        element.set('width', '100%')
        element.set('height', '100%')
        for resource in find_resources(('drawable'), path):
            if resource.stem != name:
                continue
            if resource.suffix == '.xml':
                doc = etree.tostring(convert(resource, path))
                element.set(
                    f'{{{XLINK_NS}}}href',
                    f'data:image/svg+xml;base64,{b64encode(doc).decode()}')
            else:
                element.set(
                    f'{{{XLINK_NS}}}href',
                    str(resource) if resource.is_absolute() else
                    os.path.relpath(resource, input))
            break
    else:
        color, alpha = resolver.color(name)
        element = etree.Element('rect')
        element.set('width', '100%')
        element.set('height', '100%')
        element.set('fill', color)
        if alpha is not None:
            element.set('fill-opacity', alpha)

    return element


def find_resources(types, path):
    for root in path:
        with os.scandir(root) as it:
            for entry in sorted(it, key=lambda entry: entry.name):
                if not (entry.is_dir(follow_symlinks=True)
                        and entry.name[:f'{entry.name}-'.index('-')] in types):
                    continue
                subdir = root / entry.name
                with os.scandir(subdir) as it:
                    for entry in sorted(it, key=lambda entry: entry.name):
                        if entry.is_file(follow_symlinks=True):
                            yield subdir / entry.name


def find_vectors(path):
    for filepath in find_resources({'drawable', 'mipmap'}, path):
        if filepath.suffix != '.xml':
            continue
        with open(filepath) as file:
            root = etree.parse(file).getroot()
        if root.tag in ('vector', 'adaptive-icon'):
            yield filepath


def main(argv):
    parser = argparse.ArgumentParser(
        description='Converts VectorDrawable XML files to SVG files.')
    parser.add_argument(
        'input',
        type=Path,
        metavar='file.xml',
        nargs='*',
        help='If none are given, convert all vectors in --path. '
        'May be - for stdin.')
    parser.add_argument('-n',
                        '--dry-run',
                        action='store_true',
                        help='Do not write output files.')
    parser.add_argument('-o',
                        '--output',
                        metavar='file.svg',
                        type=Path,
                        help='May be - for stdout.')
    parser.add_argument('-O',
                        '--output-html',
                        metavar='index.html',
                        type=Path,
                        help='Output as HTML.')
    parser.add_argument(
        '-p',
        '--path',
        type=Path,
        metavar='.../res',
        action='append',
        help='Find resources in this directory. May be given multiple times. '
        'If unspecified, will scan the current working tree for res directories.'
    )
    args = parser.parse_args(argv[1:])
    if args.path is None:
        path = []
        for (dirpath, dirnames, filenames) in os.walk('.'):
            dirpath = Path(dirpath)
            new_dirnames = []
            for dirname in sorted(dirnames):
                if (dirname == 'res' and len(dirpath.parts) > 1
                        and dirpath.parts[-2] == 'src'):
                    path.append(dirpath / dirname)
                elif not (dirname.startswith('.') or dirname == 'build'):
                    new_dirnames.append(dirname)
            dirnames[:] = new_dirnames
    else:
        path = list({p: None for p in args.path}.keys())
    with ExitStack() as stack:
        if args.output_html:
            output_html = stack.enter_context(
                open(args.output_html, 'w'
                     ) if str(args.output_html) != '-' else sys.stderr)
            print('''
<!DOCTYPE html>
<html>
<head>
<title>vector2svg</title>
<style>
@keyframes background-x {
    from { background-position-x: 0% }
    to { background-position-x: 16px }
}
@keyframes background-y {
    from { background-position-y: 0% }
    to { background-position-y: 16px }
}
img {
    animation:
        ease-in-out 1s infinite alternate background-x,
        ease-in-out 1s 0.5s infinite alternate background-y;
    color: #ffffff;
    background-attachment: fixed;
    background-color: #4c4c4c;
    background-image:
        linear-gradient(to right, #ffffff1d 50%, transparent 50%),
        linear-gradient(to bottom, #ffffff1d 50%, transparent 50%);
    background-size: 16px 16px;
    outline: 1px dotted #ff0000;
}
</style>
</head>
<body>
'''.strip(),
                  file=output_html)
        else:
            output_html = None
        for input in args.input or find_vectors(path):
            output = args.output or ('-' if str(input) == '-' else
                                     input.with_suffix('.svg'))
            print(f'{input} -> {output}', file=sys.stderr)
            svg = convert(input=input, path=path)
            doc = etree.tostring(svg, encoding='unicode', pretty_print=True)
            if str(output) == '-':
                sys.stdout.write(doc)
            elif not args.dry_run:
                with open(output, 'w') as file:
                    file.write(doc)
            if output_html:
                doc = etree.tostring(svg)
                print(
                    f'<p>{html.escape(str(input))}<br><img src="'
                    f'data:image/svg+xml;base64,{b64encode(doc).decode()}"></p>',
                    file=output_html)
        if output_html:
            print('''
</body>
</html>
'''.strip(), file=output_html)


if __name__ == '__main__':
    sys.exit(main(sys.argv))
